#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import numpy as np
from matplotlib import pyplot as plt
import lammps_logfile
from matplotlib import rcParams
import argparse

rcParams['font.size'] = '16'

parser = argparse.ArgumentParser(description="Plot contents from lammps log files")
parser.add_argument("-i", "--input_file", type=str, default="log.lammps",  help="LAMMPS output file")
parser.add_argument("-o", "--out_figure",type=str,default='log.jpg', help="Out figure name")
parser.add_argument("-p", "--properties",  nargs="+", type=str, help="Properties to plot")
parser.add_argument("-n", "--step_number",type=int,default=1, help="Plot every this number of time steps")
parser.add_argument("-bs", "--begin_step",type=int,default=0, help="Begin time step")
parser.add_argument("-es", "--end_step",type=int,default=-1, help="End time step")
parser.add_argument("-rn", "--run_number",type=int,default=-1, help="Lammps simulations commonly involve several run-commands. Here you may choose what run you want the log data from. Default of :code:`-1` returns data from all runs concatenated")
args = parser.parse_args()

log = lammps_logfile.File(args.input_file)
f = args.out_figure
n = args.step_number
begin = args.begin_step
end = args.end_step

if args.properties:
    props = args.properties
else:
    props = ["Temp", "Press", "Volume", "TotEng"]

units = {"Temp": "K", "Press": "GPa", "Volume": "A^3", "TotEng": "eV", "Pxx": "GPa", "Pyy": "GPa", "Pzz": "GPa", "Pxy": "GPa", "Pxz": "GPa", "Pyz": "GPa"}

props_num = len(props)

fig, ax = plt.subplots(props_num,1,figsize=(14, 6*props_num),sharex=True)
fig.subplots_adjust(hspace=0.10)

for index, i in enumerate(props):
    x = log.get("Step", run_num=args.run_number)
    y = log.get(i, run_num=args.run_number)
    if i[0] == "P" and i[1] != "o":
        y = y / 1e4
    avgy = np.mean(y[begin:end])
    ax[index].plot(x[begin:end:n], y[begin:end:n])
    if begin == 0:
        avgy = np.mean(y[-500:end])
    ax[index].axhline(avgy, c = 'k', ls = '--', alpha = 0.7)
    if i in units:
        ax[index].set_title(f"{i} = {avgy:.2f} {units[i]}")
    else:
        ax[index].set_title(f"{i} = {avgy:.2f}")
    ax[index].set_ylabel(i)
    if i == "Press":
        avg_p = avgy
    if i == "Temp":
        avg_t = avgy

ax[-1].set_xlabel('Step')

plt.savefig(f, dpi=200, bbox_inches='tight')
plt.show()

if not args.properties:
    with open("Temp.txt", "w") as file:
        file.write(str(avg_t))
    with open("Press.txt", "w") as file:
        file.write(str(avg_p))
