#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Modified to calculate either the average volume or the average values of lx, ly, lz from a starting point in an NPT simulation
and find the frame closest to these average values or volume.
"""

import numpy as np
import argparse

# Argument parser setup
parser = argparse.ArgumentParser()
parser.add_argument("--input_filename", "-i", type=str, default='log.lammps', help="input filename (log.lammps)")
parser.add_argument("--startstep", "-st", type=int, default=5000, help="start step (5000)")
parser.add_argument("--aniso", "-aniso", action='store_true', help="Use anisotropic dimensions (lx, ly, lz) instead of volume")
parser.add_argument("--iso", "-iso", action='store_true', help="Use isotropic volume instead of anisotropic dimensions")
parser.add_argument("--frequency", "-f", type=int, default=1, help="Read every nth frame (1)")

args = parser.parse_args()

def check_convertible_to_int(s: str) -> int:
    try:
        int(s)  # Try to convert the string to an integer
        return True
    except ValueError:
        return False

# Open and read the input file
datain = open(args.input_filename, "r")

# Skip lines until reaching the step data
line = datain.readline()
while line:
    if "Step" in line.split():
        break
    line = datain.readline()

# Initialize variables
sum1, sum2, sum3 = 0, 0, 0
count = 0
step_values = {}

# Reading step data
line = datain.readline()
while line:
    if line.rstrip().split():
        step = line.rstrip().split()[0]
        if check_convertible_to_int(step) and int(step) >= args.startstep and (int(step) - args.startstep) % args.frequency == 0:
            value1 = float(line.rstrip().split()[6])  # lx or volume
            value2 = float(line.rstrip().split()[7]) if args.aniso else 0  # ly, 0 if volume
            value3 = float(line.rstrip().split()[8]) if args.aniso else 0  # lz, 0 if volume
            sum1 += value1
            sum2 += value2
            sum3 += value3
            count += 1
            step_values[step] = (value1, value2, value3)
    line = datain.readline()

# Calculating average
if count > 0:
    average1 = sum1 / count
    average2 = sum2 / count if args.aniso else 0
    average3 = sum3 / count if args.aniso else 0
else:
    print("No data found after specified start step.")
    exit()

# Finding step closest to average
def calculate_distance(values, averages):
    return sum((v - a) ** 2 for v, a in zip(values, averages)) ** 0.5

closest_step = min(step_values, key=lambda x: calculate_distance(step_values[x], (average1, average2, average3)))

# Output results
print('*' * 100)
val1, val2, val3 = step_values[closest_step]
print(f'Closest step to average {"dimensions" if args.aniso else "volume"}: {closest_step}, Value1: {val1}, Value2: {val2}, Value3: {val3}')
print(f'Average Value1: {average1}, Average Value2: {average2}, Average Value3: {average3}')

# Write result to a file
output_filename = 'BEST_STEP'
with open(output_filename, "w") as dataout:
    dataout.write(str(closest_step))
