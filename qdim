#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import matplotlib.pyplot as plt
import numpy as np
import argparse

parser = argparse.ArgumentParser(description="Reads the XDATCAR file and plots the dimensions of the cell over time.")
parser.add_argument("--file_path", "-i", type=str, default='./md.out', help="The path to the XDATCAR file.")
parser.add_argument("--start_step", "-s", type=int, default=50, help="The time step to start calculating the average dimensions.")
parser.add_argument("--plot", "-p", default=True, action='store_false', help="Whether to plot the dimensions over time.")
parser.add_argument("--output", "-o", type=str, default='L.dat', help="The path to the output file.")

args = parser.parse_args()
start_step = args.start_step

def read_xdatcar(file_path):
    a_values = []
    b_values = []
    c_values = []
    count = 0

    with open(file_path, 'r') as file:
        while True:
            line = file.readline()
            if not line:
                break
            if "CELL_PARAMETERS (angstrom)" in line:
                matrix = []
                for _ in range(3):
                    matrix.append(list(map(float, file.readline().split())))
                
                a = np.linalg.norm(matrix[0])
                b = np.linalg.norm(matrix[1])
                c = np.linalg.norm(matrix[2])
                
                a_values.append(a)
                b_values.append(b)
                c_values.append(c)
                count += 1
    
    return a_values, b_values, c_values

def plot_values(a_values, b_values, c_values):
    plt.figure(figsize=(10, 6))
    plt.scatter(range(len(a_values)), a_values, label='a', alpha=0.6)
    # plt.scatter(range(len(b_values)), b_values, label='b', alpha=0.6)
    # plt.scatter(range(len(c_values)), c_values, label='c', alpha=0.6)
    plt.xlabel('Time step')
    plt.ylabel('Dimension Length (Ã…)')
    plt.legend()
    plt.savefig('dimensions.png', dpi=300)

def calculate_averages(a_values, b_values, c_values, start_step):
    if start_step > len(a_values):
        raise ValueError("The start step exceeds the number of matrices found.")
    
    a_avg = np.mean(a_values[start_step:])
    b_avg = np.mean(b_values[start_step:])
    c_avg = np.mean(c_values[start_step:])
    
    return a_avg, b_avg, c_avg

a_values, b_values, c_values = read_xdatcar(args.file_path)

if args.plot:
    plot_values(a_values, b_values, c_values)

a_avg, b_avg, c_avg = calculate_averages(a_values, b_values, c_values, start_step)

with open(args.output, 'w') as file:
    file.write(f"{a_avg:.6f}\n")
    file.write(f"{b_avg:.6f}\n")
    file.write(f"{c_avg:.6f}\n")

print(f"After {start_step} steps, the average dimensions are: a = {a_avg:.6f}, b = {b_avg:.6f}, c = {c_avg:.6f}")
