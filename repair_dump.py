#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import argparse

parser = argparse.ArgumentParser(description="This script is used to repair the dump file generated by LAMMPS. It is useful when the dump file is incomplete due to the interruption of the simulation. The script will check the number of atoms in each frame and discard the incomplete frames. The repaired dump file will be saved as 'repaired_nvt.dump'.")
parser.add_argument("--input_filename", "-i", type=str, default="nvt.dump",  help="input dump filename")
parser.add_argument("--output_filename", "-o", type=str, default="repaired_nvt.dump",  help="output dump filename")

args = parser.parse_args()

def process_frame(frame_lines):
    # Check if the frame is complete
    try:
        num_atoms = int(frame_lines[3])
        if frame_lines[8].startswith('ITEM: ATOMS'):
            actual_num_atoms = len(frame_lines) - 9
            if actual_num_atoms == num_atoms:
                return frame_lines
            else:
                print(f"Frame at timestep {frame_lines[1].strip()} is incomplete. Expected {num_atoms} atoms but got {actual_num_atoms}.")
                return []
        return []
    except IndexError:
        return []

with open(args.input_filename, 'r') as fin, open(args.output_filename, 'w') as fout:
    frame_lines = []

    for line in fin:
        # Handle cases where 'ITEM: TIMESTEP' is glued to the end of another line
        if 'ITEM: TIMESTEP' in line and not line.startswith('ITEM: TIMESTEP'):
            print(f"Found 'ITEM: TIMESTEP' glued to the end of a line. Attempting to repair.")
            parts = line.split('ITEM: TIMESTEP')
            frame_lines.append(parts[0] + '\n')
            complete_frame = process_frame(frame_lines)
            fout.writelines(complete_frame)
            frame_lines = ['ITEM: TIMESTEP\n']
        
        else:
            frame_lines.append(line)

        # If we have started a new frame, process and write the previous frame
        if line.startswith('ITEM: TIMESTEP') and len(frame_lines) > 1:
            complete_frame = process_frame(frame_lines[:-1])
            fout.writelines(complete_frame)
            frame_lines = [line]

    # Handle the last frame
    complete_frame = process_frame(frame_lines)
    fout.writelines(complete_frame)

