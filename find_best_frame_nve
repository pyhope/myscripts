#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import numpy as np
import argparse

# Argument parser setup
parser = argparse.ArgumentParser()
parser.add_argument("--input_filename", "-i", type=str, default='log.lammps', help="input filename (log.lammps)")
parser.add_argument("--startstep", "-st", type=int, default=5000, help="start step (5000)")

args = parser.parse_args()

def check_convertible_to_int(s: str) -> int:
    try:
        int(s)  # Try to convert the string to an integer
        return True
    except ValueError:
        return False

# Open and read the input file
datain = open(args.input_filename, "r")

# Skip lines until reaching the step data
line = datain.readline()
while line:
    if "Step" in line.split():
        break
    line = datain.readline()

# Initialize variables
Eng_sum, Temp_sum = 0, 0
count = 0
step_values = {}

# Reading step data
line = datain.readline()
while line:
    if line.rstrip().split():
        step = line.rstrip().split()[0]
        if check_convertible_to_int(step) and int(step) >= args.startstep:
            TotEng = float(line.rstrip().split()[3])
            Temp = float(line.rstrip().split()[4])
            Eng_sum += TotEng
            Temp_sum += Temp
            count += 1
            step_values[step] = (TotEng, Temp)
    line = datain.readline()

# Calculating average
if count > 0:
    average_Eng = Eng_sum / count
    average_Temp = Temp_sum / count

else:
    print("No data found after specified start step.")
    exit()

# Finding step closest to average
def calculate_distance(values, averages):
    return sum((v/a - 1) ** 2 for v, a in zip(values, averages)) ** 0.5

closest_step = min(step_values, key=lambda x: calculate_distance(step_values[x], (average_Eng, average_Temp)))

# Output results
print('*' * 100)
val1, val2 = step_values[closest_step]
print(f'Closest step to average: {closest_step}, total energy: {val1}, temperature: {val2}')
print(f'Average total energy: {average_Eng}, Average temperature: {average_Temp}')

# Write result to a file
output_filename = 'BEST_STEP'
with open(output_filename, "w") as dataout:
    dataout.write(str(closest_step))
